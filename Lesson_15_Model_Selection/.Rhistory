pts_DFBETAS_cutoff <- vector() # initialize an empty vector
for (row in 1:n) {
for (col in 6:12) {
if (abs(out[row,col]) > DFBETAS_cutoff) {
count <- count + 1
pts_DFBETAS_cutoff[count] <- row    # get obs from out matrix
}
}
}
if (count > 0) {
pts_DFBETAS <- unique(pts_DFBETAS_cutoff)
}
library(car) # Needed for vif() function
# linear regression model - Model A
model.A <- lm(thrust~primary+fuel+exhaust+ambient)
vif(model.A)
summary(model.A)
anova(model.A)
pr <- resid(model.A)/(1 - lm.influence(model.A)$hat)
press_stat <- sum(pr^2)
# Press Statistic
press_stat
qqnorm(rstudent(model.A),main="Normal QQ plot of R-student residuals")
qqline(rstudent(model.A))
plot(model.A$fitted.values,rstudent(model.A), main="r-student residuals vs fits (thrust)",
ylab="r-student residual",
xlab="fitted value")
abline(0, 0, col="gray")
Obs <- seq(1, length(thrust))
plot(Obs, rstudent(model.A),  main = "Observations versus Order", xlab = "Observation Order", ylab = "r-student residual")
lines(Obs, rstudent(model.A))
abline(0, 0, col="gray")
plot(primary,rstudent(model.A), main="r-student residuals vs primary",
ylab="r-student residual",
xlab="primary")
abline(0, 0, col="gray")
plot(fuel,rstudent(model.A), main="r-student residuals vs fuel",
ylab="r-student residual",
xlab="fuel")
abline(0, 0, col="gray")
plot(exhaust,rstudent(model.A), main="r-student residuals vs exhaust",
ylab="r-student residual",
xlab="exhaust")
abline(0, 0, col="gray")
plot(ambient,rstudent(model.A), main="r-student residuals vs ambient",
ylab="r-student residual",
xlab="ambient")
abline(0, 0, col="gray")
# sequence of observations
Obs <- seq(1, length(thrust))
influence_stats <- data.frame(cbind(Obs))
# R-student
r_student <- rstudent(model.A)
influence_stats$r_student <- data.frame(cbind(r_student))
# calculate hat matrix automatically
hat_diags <- lm.influence(model.A)$hat
influence_stats$hat_ii <- data.frame(cbind(hat_diags))
#### this section as a check on observation 14
X <- cbind(matrix(1,length(thrust),1),
as.matrix(primary),
as.matrix(fuel),
as.matrix(exhaust),
as.matrix(ambient))
y <- as.matrix(thrust)
xTx <- t(X) %*% X
H_matrix <- X %*% ginv(xTx, tol=.Machine$double.eps) %*% t(X)
# get the diagonal
diag(H_matrix)
#### this section as a check on observation 14
# Cooks D
D_i_auto <- cooks.distance(model.A)
influence_stats$Cooks_D <- c(D_i_auto)
#### as a check on observation 14
# Calculate studentized residuals, r_i (eqn 4.8)
e_i <- model.A$residuals
MS_Res <- anova(model.A)$'Mean Sq'[8]
r_i <- e_i/sqrt(MS_Res * (1-hat_diags))
p <- sum(hat_diags)
D_i <- ((r_i)^2/p) * (hat_diags/(1-hat_diags))
# Calculate DFFITS and DFBETAS
influence_stats$DFFITS <- c(dffits(model.A))
dfbetas.col <- dfbetas(model.A)
influence_stats$DFBETAS_0 <- c(dfbetas.col[,1])
influence_stats$DFBETAS_1 <- c(dfbetas.col[,2])
influence_stats$DFBETAS_2 <- c(dfbetas.col[,3])
influence_stats$DFBETAS_3 <- c(dfbetas.col[,4])
influence_stats$DFBETAS_4 <- c(dfbetas.col[,5])
# Calculate Covariance Ratio
influence_stats$covratio <- c(covratio(model.A))
# Identify observations that exceed limits of 1 +/- 3p/n for COVRATIO
n <- length(thrust)
limit_plus <- (1 + 3*p/n)
limit_minus <- (1 - 3*p/n)
points <- which(influence_stats$covratio > limit_plus | influence_stats$covratio < limit_minus)
# hat matrix cutoff
hm_cutoff <- 2*p/n
pts_hm_cutoff <- which(influence_stats$hat_ii > hm_cutoff)
# Cook's cutoff
Di_cutoff <- 1.0
pts_Di_cutoff <- which(influence_stats$Cooks_D > Di_cutoff)
# DFFITS cutoff
DFFITS_cutoff <- 2 * sqrt(p/n)
pts_DFFITS_cutoff <- which(abs(influence_stats$DFFITS) > DFFITS_cutoff)
# DFBETAS cutoff
DFBETAS_cutoff <- 2/(sqrt(n))
# loop through subset of matrix containing DFBETAS values
count <- 0
pts_DFBETAS_cutoff <- vector() # initialize an empty vector
for (row in 1:n) {
for (col in 6:10) {
if (abs(out[row,col]) > DFBETAS_cutoff) {
count <- count + 1
pts_DFBETAS_cutoff[count] <- row    # get obs from out matrix
}
}
}
if (count > 0) {
pts_DFBETAS <- unique(pts_DFBETAS_cutoff)
}
library(car) # Needed for vif() function
# linear regression model - Model A
model.B <- lm(thrust~primary+fuel+exhaust+ambient+press)
vif(model.B)
summary(model.B)
anova(model.B)
pr <- resid(model.B)/(1 - lm.influence(model.B)$hat)
press_stat <- sum(pr^2)
# Press Statistic
press_stat
qqnorm(rstudent(model.B),main="Normal QQ plot of R-student residuals")
qqline(rstudent(model.B))
plot(model.B$fitted.values,rstudent(model.B), main="r-student residuals vs fits (thrust)",
ylab="r-student residual",
xlab="fitted value")
abline(0, 0, col="gray")
Obs <- seq(1, length(thrust))
plot(Obs, rstudent(model.B),  main = "Observations versus Order", xlab = "Observation Order", ylab = "r-student residual")
lines(Obs, rstudent(model.B))
abline(0, 0, col="gray")
plot(primary,rstudent(model.B), main="r-student residuals vs primary",
ylab="r-student residual",
xlab="primary")
abline(0, 0, col="gray")
plot(fuel,rstudent(model.B), main="r-student residuals vs fuel",
ylab="r-student residual",
xlab="fuel")
abline(0, 0, col="gray")
plot(exhaust,rstudent(model.B), main="r-student residuals vs exhaust",
ylab="r-student residual",
xlab="exhaust")
abline(0, 0, col="gray")
plot(ambient,rstudent(model.B), main="r-student residuals vs ambient",
ylab="r-student residual",
xlab="ambient")
abline(0, 0, col="gray")
plot(press,rstudent(model.B), main="r-student residuals vs press",
ylab="r-student residual",
xlab="press")
abline(0, 0, col="gray")
# sequence of observations
Obs <- seq(1, length(thrust))
influence_stats <- data.frame(cbind(Obs))
# R-student
r_student <- rstudent(model.B)
influence_stats$r_student <- data.frame(cbind(r_student))
# calculate hat matrix automatically
hat_diags <- lm.influence(model.B)$hat
influence_stats$hat_ii <- data.frame(cbind(hat_diags))
#### this section as a check on observation 14
X <- cbind(matrix(1,length(thrust),1),
as.matrix(primary),
as.matrix(fuel),
as.matrix(exhaust),
as.matrix(ambient),
as.matrix(press))
y <- as.matrix(thrust)
xTx <- t(X) %*% X
H_matrix <- X %*% ginv(xTx, tol=.Machine$double.eps) %*% t(X)
# get the diagonal
diag(H_matrix)
#### this section as a check on observation 14
# Cooks D
D_i_auto <- cooks.distance(model.B)
influence_stats$Cooks_D <- c(D_i_auto)
#### as a check on observation 14
# Calculate studentized residuals, r_i (eqn 4.8)
e_i <- model.B$residuals
MS_Res <- anova(model.B)$'Mean Sq'[8]
r_i <- e_i/sqrt(MS_Res * (1-hat_diags))
p <- sum(hat_diags)
D_i <- ((r_i)^2/p) * (hat_diags/(1-hat_diags))
# Calculate DFFITS and DFBETAS
influence_stats$DFFITS <- c(dffits(model.B))
dfbetas.col <- dfbetas(model.B)
influence_stats$DFBETAS_0 <- c(dfbetas.col[,1])
influence_stats$DFBETAS_1 <- c(dfbetas.col[,2])
influence_stats$DFBETAS_2 <- c(dfbetas.col[,3])
influence_stats$DFBETAS_3 <- c(dfbetas.col[,4])
influence_stats$DFBETAS_4 <- c(dfbetas.col[,5])
influence_stats$DFBETAS_5 <- c(dfbetas.col[,6])
# Calculate Covariance Ratio
influence_stats$covratio <- c(covratio(model.B))
# Identify observations that exceed limits of 1 +/- 3p/n for COVRATIO
n <- length(thrust)
limit_plus <- (1 + 3*p/n)
limit_minus <- (1 - 3*p/n)
points <- which(influence_stats$covratio > limit_plus | influence_stats$covratio < limit_minus)
# hat matrix cutoff
hm_cutoff <- 2*p/n
pts_hm_cutoff <- which(influence_stats$hat_ii > hm_cutoff)
# Cook's cutoff
Di_cutoff <- 1.0
pts_Di_cutoff <- which(influence_stats$Cooks_D > Di_cutoff)
# DFFITS cutoff
DFFITS_cutoff <- 2 * sqrt(p/n)
pts_DFFITS_cutoff <- which(abs(influence_stats$DFFITS) > DFFITS_cutoff)
# DFBETAS cutoff
DFBETAS_cutoff <- 2/(sqrt(n))
# loop through subset of matrix containing DFBETAS values
count <- 0
pts_DFBETAS_cutoff <- vector() # initialize an empty vector
for (row in 1:n) {
for (col in 6:11) {
if (abs(out[row,col]) > DFBETAS_cutoff) {
count <- count + 1
pts_DFBETAS_cutoff[count] <- row    # get obs from out matrix
}
}
}
if (count > 0) {
pts_DFBETAS <- unique(pts_DFBETAS_cutoff)
}
# linear regression model - Model C
model.C <- lm(thrust~primary+press+exhaust+ambient)
vif(model.C)
summary(model.C)
anova(model.C)
pr <- resid(model.C)/(1 - lm.influence(model.C)$hat)
press_stat <- sum(pr^2)
# Press Statistic
press_stat
qqnorm(rstudent(model.C),main="Normal QQ plot of R-student residuals")
qqline(rstudent(model.C))
plot(model.C$fitted.values,rstudent(model.C), main="r-student residuals vs fits (thrust)",
ylab="r-student residual",
xlab="fitted value")
abline(0, 0, col="gray")
Obs <- seq(1, length(thrust))
plot(Obs, rstudent(model.C),  main = "Observations versus Order", xlab = "Observation Order", ylab = "r-student residual")
lines(Obs, rstudent(model.C))
abline(0, 0, col="gray")
plot(primary,rstudent(model.C), main="r-student residuals vs primary",
ylab="r-student residual",
xlab="primary")
abline(0, 0, col="gray")
plot(exhaust,rstudent(model.C), main="r-student residuals vs exhaust",
ylab="r-student residual",
xlab="exhaust")
abline(0, 0, col="gray")
plot(ambient,rstudent(model.C), main="r-student residuals vs ambient",
ylab="r-student residual",
xlab="ambient")
abline(0, 0, col="gray")
plot(press,rstudent(model.C), main="r-student residuals vs press",
ylab="r-student residual",
xlab="press")
abline(0, 0, col="gray")
# sequence of observations
Obs <- seq(1, length(thrust))
influence_stats <- data.frame(cbind(Obs))
# R-student
r_student <- rstudent(model.C)
influence_stats$r_student <- data.frame(cbind(r_student))
# calculate hat matrix automatically
hat_diags <- lm.influence(model.C)$hat
influence_stats$hat_ii <- data.frame(cbind(hat_diags))
#### this section as a check on observation 14
X <- cbind(matrix(1,length(thrust),1),
as.matrix(primary),
as.matrix(exhaust),
as.matrix(ambient),
as.matrix(press))
y <- as.matrix(thrust)
xTx <- t(X) %*% X
H_matrix <- X %*% ginv(xTx, tol=.Machine$double.eps) %*% t(X)
# get the diagonal
diag(H_matrix)
#### this section as a check on observation 14
# Cooks D
D_i_auto <- cooks.distance(model.C)
influence_stats$Cooks_D <- c(D_i_auto)
#### as a check on observation 14
# Calculate studentized residuals, r_i (eqn 4.8)
e_i <- model.C$residuals
MS_Res <- anova(model.C)$'Mean Sq'[8]
r_i <- e_i/sqrt(MS_Res * (1-hat_diags))
p <- sum(hat_diags)
D_i <- ((r_i)^2/p) * (hat_diags/(1-hat_diags))
# Calculate DFFITS and DFBETAS
influence_stats$DFFITS <- c(dffits(model.C))
dfbetas.col <- dfbetas(model.C)
influence_stats$DFBETAS_0 <- c(dfbetas.col[,1])
influence_stats$DFBETAS_1 <- c(dfbetas.col[,2])
influence_stats$DFBETAS_2 <- c(dfbetas.col[,3])
influence_stats$DFBETAS_3 <- c(dfbetas.col[,4])
influence_stats$DFBETAS_4 <- c(dfbetas.col[,5])
# Calculate Covariance Ratio
influence_stats$covratio <- c(covratio(model.C))
# Identify observations that exceed limits of 1 +/- 3p/n for COVRATIO
n <- length(thrust)
limit_plus <- (1 + 3*p/n)
limit_minus <- (1 - 3*p/n)
points <- which(influence_stats$covratio > limit_plus | influence_stats$covratio < limit_minus)
# hat matrix cutoff
hm_cutoff <- 2*p/n
pts_hm_cutoff <- which(influence_stats$hat_ii > hm_cutoff)
# Cook's cutoff
Di_cutoff <- 1.0
pts_Di_cutoff <- which(influence_stats$Cooks_D > Di_cutoff)
# DFFITS cutoff
DFFITS_cutoff <- 2 * sqrt(p/n)
pts_DFFITS_cutoff <- which(abs(influence_stats$DFFITS) > DFFITS_cutoff)
# DFBETAS cutoff
DFBETAS_cutoff <- 2/(sqrt(n))
# loop through subset of matrix containing DFBETAS values
count <- 0
pts_DFBETAS_cutoff <- vector() # initialize an empty vector
for (row in 1:n) {
for (col in 6:10) {
if (abs(out[row,col]) > DFBETAS_cutoff) {
count <- count + 1
pts_DFBETAS_cutoff[count] <- row    # get obs from out matrix
}
}
}
if (count > 0) {
pts_DFBETAS <- unique(pts_DFBETAS_cutoff)
}
library(olsrr)
k <- ols_step_forward_p(model, penter=0.1)
plot(k)
# final model
k$model
k <- ols_step_backward_p(model, prem =0.1)
plot(k)
# final model
k$model
k <- ols_step_both_p(model, prem =0.1)
plot(k)
# final model
k$model
unlink('L15Ex_JetTurbine_Model_Selection_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk-14.0.1') # for 64-bit version
#library(rJava)
library("xlsx") # Needed to read data
library(MuMIn)
# Import data
Lex16_1 <- read.xlsx("data-ex-10-1.xlsx", sheetIndex = 1, sheetName=NULL, rowIndex=NULL, startRow=NULL, endRow=NULL, colIndex= NULL, as.data.frame=TRUE, header=TRUE, colClasses=NA, keepFormulas=FALSE, encoding="unknown")
# Give labels to data columns
names(Lex16_1) <- c("y", "x1", "x2", "x3", "x4")
attach(Lex16_1)
# Output data to make sure it reads properly
Lex16_1
# Output data dimensions
dim(Lex16_1)
### Example 11.1 (p. 375) ###
# Reproduce Table 11.1 on p. 375
# First, generate lm model using all possible regressions
Lex16_1_lm <- lm(y~x1+x2+x3+x4, data=Lex16_1, na.action = "na.fail") # Linear model of raw data
# Use dredge() function to automatically perform all regressors regression
combinations <- dredge(Lex16_1_lm, extra = c(R_Sq = function(x) summary(x)$r.squared,R_Sq_Adj = function(x) summary(x)$adj.r.squared, MS_Res = function(x) summary(x)$sigma^2,Cp, MallowCp = function(x) summary(x)$sigma^2*df.residual(x)/summary(Lex16_1_lm)$sigma^2-dim(Lex16_1)[1]+2*length(x$coefficients)))
print(combinations)
# model 1
model.1 <- lm(y ~ x1 + x2)
summary(model.1)
anova(model.1)
# model 2
model.2 <- lm(y ~ x1 + x2 + x4)
summary(model.2)
anova(model.2)
library(e1071)
library(xtable)
# using x1,x2 and x4 data values, calculate respective model y_hats
model.1.out <- model.1$coefficients[1] +
model.1$coefficients[2] * x1  +
model.1$coefficients[3] * x2
model.2.out <- model.2$coefficients[1] +
model.2$coefficients[2] * x1 +
model.2$coefficients[3] * x2 +
model.2$coefficients[4] * x4
table_models <- data.frame(cbind(y,x1,x2,x3,x4,model.1.out,model.2.out))
out <- table_models
colnames(out) <- c("$y$",
"$x_1$",
"$x_2$",
"$x_3$",
"$x_4$",
"model 1",
"model 2")
tab <- (xtable(out, digits=c(0,1,0,0,0,0,3,3)))
print(tab, type="html")
knitr::opts_chunk$set(echo = TRUE)
#Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk-14.0.1') # for 64-bit version
#library(rJava)
library("xlsx") # Needed to read data
# Import data
Lex16_2 <- read.xlsx("C:\\Users\\rickd_000\\OneDrive\\Documents\\OPER679-02-SP20\\Lesson_16\\data-ex-11-2.xlsx", sheetIndex = 1, sheetName=NULL, rowIndex=NULL, startRow=NULL, endRow=NULL, colIndex= NULL, as.data.frame=TRUE, header=TRUE, colClasses=NA, keepFormulas=FALSE, encoding="unknown")
knitr::opts_chunk$set(echo = TRUE)
#Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk-14.0.1') # for 64-bit version
#library(rJava)
library("xlsx") # Needed to read data
# Import data
Lex16_2 <- read.xlsx("data-ex-11-2.xlsx", sheetIndex = 1, sheetName=NULL, rowIndex=NULL, startRow=NULL, endRow=NULL, colIndex= NULL, as.data.frame=TRUE, header=TRUE, colClasses=NA, keepFormulas=FALSE, encoding="unknown")
# Give labels to data columns
names(Lex16_2) <- c("Obs", "City", "time", "cases", "distance")
attach(Lex16_2)
# Output data to make sure it reads properly
Lex16_2
# Output data dimensions
dim(Lex16_2)
### Example 11.2 (375-376) ###
# Distinguish between original data and new data
dfnew <- subset(Lex16_2, Obs > 25)
dfold <- subset(Lex16_2, Obs <= 25)
# Create model using original data
model.old <- lm(dfold$time ~ dfold$cases + dfold$distance)
summary(model.old)
anova(model.old)
# Predict values in new dataset using original model
y_new_hat <- model.old$coefficients[1] +
model.old$coefficients[2]*dfnew$cases +
model.old$coefficients[3]*dfnew$distance
the_diff <- dfnew$time - y_new_hat
library(e1071)
library(xtable)
table_11pt2 <- data.frame(dfnew$Obs,
dfnew$City,
dfnew$cases,
dfnew$distance,
dfnew$time,
y_new_hat,
the_diff)
out <- table_11pt2
colnames(out) <- c("Observation",
"City",
"Cases, $x_1$",
"Distance, $x_2$",
"Observed Time, $y$",
"Least Squares Fit, $\\hat{y}$",
"Least Squares Fit, $y-\\hat{y}$")
tab <- (xtable(out,digits=c(0,0,NA,0,0,2,4,4)))
print(tab, type="html")
### Example 11.3 (p. 380-385) ###
# Import new data, defining which data points are in Estimation set and which are in Prediction set
# Import data
Lex16_3 <- read.xlsx("data-ex-11-3.xlsx", sheetIndex = 1, sheetName=NULL, rowIndex=NULL, startRow=NULL, endRow=NULL, colIndex= NULL, as.data.frame=TRUE, header=TRUE, colClasses=NA, keepFormulas=FALSE, encoding="unknown")
# Give labels to data columns
names(Lex16_3) <- c("Obs", "City", "time", "cases", "distance","EorP")
attach(Lex16_3)
# Output data to make sure it reads properly
the_data <- data.frame(Lex16_3$Obs,
Lex16_3$City,
Lex16_3$time,
Lex16_3$cases,
Lex16_3$distance,
Lex16_3$EorP)
out <- the_data
colnames(out) <- c("Observation, $i$",
"City",
"Delivery TIme, $y$",
"Cases, $x_1$",
"Distance, $x_2$",
"Estimation (E) or Prediction (P) Data Set")
tab <- (xtable(out,digits=c(0,0,NA,2,0,0,NA)))
print(tab, type="html")
# Split data into Estimation and Prediction sets
# Distinguish between original data and new data
dfP <- subset(Lex16_3, EorP != "E")
dfE <- subset(Lex16_3, EorP != "P")
# list datafiles "P" and "E"
dfP
dfE
# Create model using estimation set and compare to model using full set. Compare to Table 11.5 on p. 384
# model using estimation data
model.dfE <- lm(dfE$time ~ dfE$cases + dfE$distance)
# analysis using estimation data
xtable(summary(model.dfE))
xtable(anova(model.dfE))
# model using all data
model.Lex16_3 <- lm(Lex16_3$time ~ Lex16_3$cases + Lex16_3$distance)
# analysis using all data
xtable(summary(model.Lex16_3))
xtable(anova(model.Lex16_3))
# Reproduce Table 11.6 on p. 385
# y predicted -- using predicted values in model created from the estimated values
y_hat <- model.dfE$coefficients[1] +
model.dfE$coefficients[2]*dfP$cases +
model.dfE$coefficients[3]*dfP$distance
# predict error
predict_error <- dfP$time - y_hat
table_11pt3 <- data.frame(dfP$Obs,
dfP$time,
y_hat,
predict_error)
out <- table_11pt3
colnames(out) <- c("Observation, $i$",
"Observed, $y_i$",
"LSF Predicted, $\\hat{y}_i$",
"LSF Prediction Error, $e_i = y_i-\\hat{y}_i$")
tab <- (xtable(out,digits=c(0,0,2,4,4)))
print(tab, type="html")
