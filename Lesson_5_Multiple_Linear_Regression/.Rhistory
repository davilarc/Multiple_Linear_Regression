knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(xtable)
library("xlsx") # Needed to read data
library(car) # Needed for alternative scatterplot matrix to default
library(scatterplot3d) # Needed for 3D scatterplot
library(matlib) # Needed for Invers() function
library(MASS) # Needed for ginv() function
library(standardize) # Needed for unit normal scaling in Example 3.14
rm(list = ls())
ex3_1 <- read.xlsx("data-ex-3-1.xlsx",
sheetIndex = 1,
colIndex = c(2,3,4),
as.data.frame = TRUE,
header = TRUE)
names(ex3_1) <- c("Delivery_Time", "Num_Cases", "Distance")
attach(ex3_1)
# Output data to make sure it reads properly
xtable(ex3_1)
# output dataframe structure
str(ex3_1)
# dim of data 'matrix'
dim(ex3_1)
# pairs() - The pairs function returns a plot matrix, consisting of scatterplots for each variable-combination of a data frame.
pairs(ex3_1)
# The scatterplotMatrix function provides a convenient interface to the pairs function to produce enhanced scatterplot matrices, including univariate displays on the diagonal and a variety of fitted lines, smoothers, variance functions, and concentration ellipsoids.
scatterplotMatrix(ex3_1, use = c("pairwise.complete.obs"))
# Plots a three dimensional (3D) point cloud
scatterplot3d(Num_Cases, Distance, Delivery_Time)
X <- cbind(matrix(1,length(Distance),1),as.matrix(Num_Cases),as.matrix(Distance))
y <- as.matrix(Delivery_Time)
# display X matrix
X
# X'X matrix
xTx <- t(X) %*% X
xTx
print("Inverse(xTx)")
Inverse(xTx)
print("ginv(xTx)")
ginv(xTx)
print("inv(xTx)")
inv(xTx)
print("Inverse(Inverse(xTx))")
Inverse(Inverse(xTx))
print("ginv(ginv(xTx))")
ginv(ginv(xTx))
print("inv(inv(xTx))")
inv(inv(xTx))
print("X-transpose * y")
t(X) %*% y
# The least-squares estimator of beta_coeffs
print("Beta Coefficients")
beta_hat <- ginv(xTx) %*% t(X) %*% y
beta_hat
model <- lm(Delivery_Time ~ Num_Cases + Distance)
xtable(model)
# aov table
xtable(summary(aov(model)))
# R coefficient
res <- data.frame(model$residuals)
colnames(res) <- "Residuals"
out <- as.data.frame(c(sigma(model), summary(model)$r.squared, summary(model)$adj.r.squared))
names(out) <- ""
rownames(out) <- c("$$S$$", "$$R^2$$", "$$R^{2}_{adj}$$")
xtable(out, digits=6)
#xtable(res)
y_hat <- beta_hat[1,1] + beta_hat[2,1]*Num_Cases + beta_hat[3,1]*Distance
SS_res1 <- sum((Delivery_Time - y_hat)^2)
SS_res1
yprime_y <- t(Delivery_Time) %*% Delivery_Time
beta_x_y <- t(beta_hat)%*%t(X)%*% Delivery_Time
SS_res2 <- yprime_y - beta_x_y
SS_res2
# The least-squares estimator of beta_coeffs using inv() and Inverse()
print("Beta Coefficients - using inv()")
beta_hat_inv <- inv(xTx) %*% t(X) %*% y
# yprime_y calculated in Ex 3.1
beta_x_y_inv <- t(beta_hat_inv)%*%t(X)%*% Delivery_Time
SS_res_inv <- yprime_y - beta_x_y_inv
print("Beta Coefficients - using Inverse()")
beta_hat_Inverse = Inverse(xTx) %*% t(X) %*% y
beta_x_y_Inverse <- t(beta_hat_Inverse)%*%t(X)%*% Delivery_Time
SS_res_Inverse <- yprime_y - beta_x_y_Inverse
# Using the inv() function
y_hat <- beta_hat_inv[1,1] + beta_hat_inv[2,1]*Num_Cases + beta_hat_inv[3,1]*Distance
SS_res_inv2 <- sum((Delivery_Time - y_hat)^2)
# Using the inv() function
y_hat <- beta_hat_Inverse[1,1] + beta_hat_Inverse[2,1]*Num_Cases + beta_hat_Inverse[3,1]*Distance
SS_res_Inverse2 <- sum((Delivery_Time - y_hat)^2)
SS_T <- t(Delivery_Time)%*%Delivery_Time-(sum(Delivery_Time))^2/length(Delivery_Time)
SS_R <- t(beta_hat)%*%t(X)%*%Delivery_Time-(sum(Delivery_Time))^2/length(Delivery_Time)
# anova table, model calculated using lm() in Ex 3.1 abov
anova(model)
summary(anova(model))
# degrees of freedom
k <- 2                     # number of beta regressor parameters
n <- length(Delivery_Time) # number of obervations
SS_reg_df <- k
SS_res_df <- n-k-1
SS_T_df <- n - 1
# n = length(Delivery_Time); calculated in previous chunk
SS_T <- t(Delivery_Time)%*%Delivery_Time - (sum(Delivery_Time))^2/n
SS_R <- t(beta_hat) %*% t(X) %*% Delivery_Time - (sum(Delivery_Time))^2/n
SS_res <- SS_T - SS_R
# recall, k = 2 (above)
MS_R <- SS_R/k
MS_res <- SS_res/(n-k-1)
F_0 <- MS_R/MS_res
# F critical using the qf() command at the 0.01 significance
siglevel <- 0.01
Fcritical <- qf(1-siglevel, SS_reg_df, SS_res_df)
# xTx matrix calculated in the begining of this lesson R activity
C_matrix <- ginv(xTx)
C_matrix
# n is the number of observations and p is the number of beta parameters
p <- length(beta_hat)
sigma_hat_sq = SS_res/(n - p)
# calculate t statistic for regressor parameters beta_1 and beta_2
t0_beta2 = beta_hat[2,1]/sqrt(sigma_hat_sq * C_matrix[2,2])
t0_beta3 = beta_hat[3,1]/sqrt(sigma_hat_sq * C_matrix[3,3])
# t-critical and p-value calculations
# for alpha = 0.05
alpha = 0.05
tcritical_value = abs(qt(alpha/2, df = SS_res_df))
p_value_beta2 = 2*pt(-abs(t0_beta2), df = SS_res_df)
p_value_beta3 = 2*pt(-abs(t0_beta3), df = SS_res_df)
y_bar = sum(Delivery_Time)/length(Delivery_Time)
model_full <- lm(Delivery_Time ~ Num_Cases + Distance)
beta_0 <- model_full$coefficients[1]
beta_1 <- model_full$coefficients[2]
beta_2 <- model_full$coefficients[3]
y_hat <- beta_0 + beta_1*Num_Cases + beta_2*Distance
SS_R_mf <- sum((y_hat - y_bar)^2)
# excludes the Distance parameter
model_reduced <- lm(Delivery_Time ~ Num_Cases)
beta_0 <- model_reduced$coefficients[1]
beta_1 <- model_reduced$coefficients[2]
y_hat <- beta_0 + beta_1*Num_Cases
SS_R_mr <- sum((y_hat - y_bar)^2)
r <- length(model_full$coefficients) - length(model_reduced$coefficients)
p <- length(model_full$coefficients)
n <- length(Delivery_Time)
SS_R_beta2contrib = SS_R_mf - SS_R_mr
F_0 <- (SS_R_beta2contrib/r)/MS_res
alpha = 0.05
F_critical <- qf(1-alpha,r,n-p)
# use anova() function on the ful model
F_0anova <- anova(model_full)$F[2]
#1Jun2020 -- added more info
model.full <- lm(Delivery_Time ~ Num_Cases + Distance)
model.reduced <- lm(Delivery_Time ~ Num_Cases)
summary(model.full)
anova(model.full)
results <- anova(model.reduced, model.full)
results
# get the regression coefficients using the lm command
# re-running this to ensure we get the correct regression parameters
model <- lm(Delivery_Time ~ Num_Cases + Distance)
beta_0 <- model$coefficients[1]
beta_1 <- model$coefficients[2]
beta_2 <- model$coefficients[3]
leftwingb1CI <- beta_1-tcritical_value*sqrt(sigma_hat_sq*C_matrix[2,2])
rightwingb1CI <- beta_1+tcritical_value*sqrt(sigma_hat_sq*C_matrix[2,2])
leftwingb2CI <- beta_2-tcritical_value*sqrt(sigma_hat_sq*C_matrix[3,3])
rightwingb2CI <- beta_2+tcritical_value*sqrt(sigma_hat_sq*C_matrix[3,3])
# enter the x_0 data
data.x_0 <- c(1,8, 275)
x_0 <- matrix(data.x_0, nrow = 3, ncol = 1, byrow = TRUE)
# The fitted value at this point x_0 is found from Eq. (3.47)
data.beta <- c(beta_0, beta_1, beta_2)
beta_matrix <- matrix(data.beta, nrow = 3, ncol = 1, byrow = TRUE)
y_hat <- t(x_0) %*% beta_matrix
# The variance of Å·_0 is estimated by
var_y_hat <- sigma_hat_sq*t(x_0) %*%  ginv(t(X) %*% X) %*% x_0
left_wingCI = y_hat - tcritical_value*sqrt(var_y_hat)
right_wingCI = y_hat + tcritical_value*sqrt(var_y_hat)
sqrt_value <- sigma_hat_sq*(1+ t(x_0) %*%  ginv(t(X) %*% X) %*% x_0)
left_wingPI = y_hat - tcritical_value*sqrt(sqrt_value)
right_wingPI = y_hat + tcritical_value*sqrt(sqrt_value)
# follows the unit normal scalling methodology outlined in section 3.9
# create 2 dim array containing only regressors
X <- cbind(as.matrix(Num_Cases),as.matrix(Distance))
# scale regressors using scale function -- essentially eqn 3.55
Z <- scale(X)
y <- as.matrix(Delivery_Time)
# scale responses using scale function -- essentially eqn 3.56
y_star <- scale(y)
# from eqn 3.57
b_hat = ginv(t(Z) %*% Z) %*% t(Z) %*% y_star
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(xtable)
library("xlsx") # Needed to read data
library(car) # Needed for alternative scatterplot matrix to default
library(scatterplot3d) # Needed for 3D scatterplot
library(matlib) # Needed for Invers() function
library(MASS) # Needed for ginv() function
library(standardize) # Needed for unit normal scaling in Example 3.14
rm(list = ls())
ex3_1 <- read.xlsx("data-ex-3-1.xlsx",
sheetIndex = 1,
colIndex = c(2,3,4),
as.data.frame = TRUE,
header = TRUE)
names(ex3_1) <- c("Delivery_Time", "Num_Cases", "Distance")
attach(ex3_1)
# Output data to make sure it reads properly
xtable(ex3_1)
# output dataframe structure
str(ex3_1)
# dim of data 'matrix'
dim(ex3_1)
# pairs() - The pairs function returns a plot matrix, consisting of scatterplots for each variable-combination of a data frame.
pairs(ex3_1)
# The scatterplotMatrix function provides a convenient interface to the pairs function to produce enhanced scatterplot matrices, including univariate displays on the diagonal and a variety of fitted lines, smoothers, variance functions, and concentration ellipsoids.
scatterplotMatrix(ex3_1, use = c("pairwise.complete.obs"))
# Plots a three dimensional (3D) point cloud
scatterplot3d(Num_Cases, Distance, Delivery_Time)
X <- cbind(matrix(1,length(Distance),1),as.matrix(Num_Cases),as.matrix(Distance))
y <- as.matrix(Delivery_Time)
# display X matrix
X
# X'X matrix
xTx <- t(X) %*% X
xTx
print("Inverse(xTx)")
Inverse(xTx)
print("ginv(xTx)")
ginv(xTx)
print("inv(xTx)")
inv(xTx)
print("Inverse(Inverse(xTx))")
Inverse(Inverse(xTx))
print("ginv(ginv(xTx))")
ginv(ginv(xTx))
print("inv(inv(xTx))")
inv(inv(xTx))
print("X-transpose * y")
t(X) %*% y
# The least-squares estimator of beta_coeffs
print("Beta Coefficients")
beta_hat <- ginv(xTx) %*% t(X) %*% y
beta_hat
model <- lm(Delivery_Time ~ Num_Cases + Distance)
xtable(model)
# aov table
xtable(summary(aov(model)))
# R coefficient
res <- data.frame(model$residuals)
colnames(res) <- "Residuals"
out <- as.data.frame(c(sigma(model), summary(model)$r.squared, summary(model)$adj.r.squared))
names(out) <- ""
rownames(out) <- c("$$S$$", "$$R^2$$", "$$R^{2}_{adj}$$")
xtable(out, digits=6)
#xtable(res)
y_hat <- beta_hat[1,1] + beta_hat[2,1]*Num_Cases + beta_hat[3,1]*Distance
SS_res1 <- sum((Delivery_Time - y_hat)^2)
SS_res1
yprime_y <- t(Delivery_Time) %*% Delivery_Time
beta_x_y <- t(beta_hat)%*%t(X)%*% Delivery_Time
SS_res2 <- yprime_y - beta_x_y
SS_res2
# The least-squares estimator of beta_coeffs using inv() and Inverse()
print("Beta Coefficients - using inv()")
beta_hat_inv <- inv(xTx) %*% t(X) %*% y
# yprime_y calculated in Ex 3.1
beta_x_y_inv <- t(beta_hat_inv)%*%t(X)%*% Delivery_Time
SS_res_inv <- yprime_y - beta_x_y_inv
print("Beta Coefficients - using Inverse()")
beta_hat_Inverse = Inverse(xTx) %*% t(X) %*% y
beta_x_y_Inverse <- t(beta_hat_Inverse)%*%t(X)%*% Delivery_Time
SS_res_Inverse <- yprime_y - beta_x_y_Inverse
# Using the inv() function
y_hat <- beta_hat_inv[1,1] + beta_hat_inv[2,1]*Num_Cases + beta_hat_inv[3,1]*Distance
SS_res_inv2 <- sum((Delivery_Time - y_hat)^2)
# Using the inv() function
y_hat <- beta_hat_Inverse[1,1] + beta_hat_Inverse[2,1]*Num_Cases + beta_hat_Inverse[3,1]*Distance
SS_res_Inverse2 <- sum((Delivery_Time - y_hat)^2)
SS_T <- t(Delivery_Time)%*%Delivery_Time-(sum(Delivery_Time))^2/length(Delivery_Time)
SS_R <- t(beta_hat)%*%t(X)%*%Delivery_Time-(sum(Delivery_Time))^2/length(Delivery_Time)
# anova table, model calculated using lm() in Ex 3.1 abov
anova(model)
summary(anova(model))
# degrees of freedom
k <- 2                     # number of beta regressor parameters
n <- length(Delivery_Time) # number of obervations
SS_reg_df <- k
SS_res_df <- n-k-1
SS_T_df <- n - 1
# n = length(Delivery_Time); calculated in previous chunk
SS_T <- t(Delivery_Time)%*%Delivery_Time - (sum(Delivery_Time))^2/n
SS_R <- t(beta_hat) %*% t(X) %*% Delivery_Time - (sum(Delivery_Time))^2/n
SS_res <- SS_T - SS_R
# recall, k = 2 (above)
MS_R <- SS_R/k
MS_res <- SS_res/(n-k-1)
F_0 <- MS_R/MS_res
# F critical using the qf() command at the 0.01 significance
siglevel <- 0.01
Fcritical <- qf(1-siglevel, SS_reg_df, SS_res_df)
# xTx matrix calculated in the begining of this lesson R activity
C_matrix <- ginv(xTx)
C_matrix
# n is the number of observations and p is the number of beta parameters
p <- length(beta_hat)
sigma_hat_sq = SS_res/(n - p)
# calculate t statistic for regressor parameters beta_1 and beta_2
t0_beta2 = beta_hat[2,1]/sqrt(sigma_hat_sq * C_matrix[2,2])
t0_beta3 = beta_hat[3,1]/sqrt(sigma_hat_sq * C_matrix[3,3])
# t-critical and p-value calculations
# for alpha = 0.05
alpha = 0.05
tcritical_value = abs(qt(alpha/2, df = SS_res_df))
p_value_beta2 = 2*pt(-abs(t0_beta2), df = SS_res_df)
p_value_beta3 = 2*pt(-abs(t0_beta3), df = SS_res_df)
y_bar = sum(Delivery_Time)/length(Delivery_Time)
model_full <- lm(Delivery_Time ~ Num_Cases + Distance)
beta_0 <- model_full$coefficients[1]
beta_1 <- model_full$coefficients[2]
beta_2 <- model_full$coefficients[3]
y_hat <- beta_0 + beta_1*Num_Cases + beta_2*Distance
SS_R_mf <- sum((y_hat - y_bar)^2)
# excludes the Distance parameter
model_reduced <- lm(Delivery_Time ~ Num_Cases)
beta_0 <- model_reduced$coefficients[1]
beta_1 <- model_reduced$coefficients[2]
y_hat <- beta_0 + beta_1*Num_Cases
SS_R_mr <- sum((y_hat - y_bar)^2)
r <- length(model_full$coefficients) - length(model_reduced$coefficients)
p <- length(model_full$coefficients)
n <- length(Delivery_Time)
SS_R_beta2contrib = SS_R_mf - SS_R_mr
F_0 <- (SS_R_beta2contrib/r)/MS_res
alpha = 0.05
F_critical <- qf(1-alpha,r,n-p)
# use anova() function on the ful model
F_0anova <- anova(model_full)$F[2]
#1Jun2020 -- added more info
model.full <- lm(Delivery_Time ~ Num_Cases + Distance)
model.reduced <- lm(Delivery_Time ~ Num_Cases)
summary(model.full)
anova(model.full)
results <- anova(model.reduced, model.full)
results
# get the regression coefficients using the lm command
# re-running this to ensure we get the correct regression parameters
model <- lm(Delivery_Time ~ Num_Cases + Distance)
beta_0 <- model$coefficients[1]
beta_1 <- model$coefficients[2]
beta_2 <- model$coefficients[3]
leftwingb1CI <- beta_1-tcritical_value*sqrt(sigma_hat_sq*C_matrix[2,2])
rightwingb1CI <- beta_1+tcritical_value*sqrt(sigma_hat_sq*C_matrix[2,2])
leftwingb2CI <- beta_2-tcritical_value*sqrt(sigma_hat_sq*C_matrix[3,3])
rightwingb2CI <- beta_2+tcritical_value*sqrt(sigma_hat_sq*C_matrix[3,3])
# enter the x_0 data
data.x_0 <- c(1,8, 275)
x_0 <- matrix(data.x_0, nrow = 3, ncol = 1, byrow = TRUE)
# The fitted value at this point x_0 is found from Eq. (3.47)
data.beta <- c(beta_0, beta_1, beta_2)
beta_matrix <- matrix(data.beta, nrow = 3, ncol = 1, byrow = TRUE)
y_hat <- t(x_0) %*% beta_matrix
# The variance of Å·_0 is estimated by
var_y_hat <- sigma_hat_sq*t(x_0) %*%  ginv(t(X) %*% X) %*% x_0
left_wingCI = y_hat - tcritical_value*sqrt(var_y_hat)
right_wingCI = y_hat + tcritical_value*sqrt(var_y_hat)
sqrt_value <- sigma_hat_sq*(1+ t(x_0) %*%  ginv(t(X) %*% X) %*% x_0)
left_wingPI = y_hat - tcritical_value*sqrt(sqrt_value)
right_wingPI = y_hat + tcritical_value*sqrt(sqrt_value)
# follows the unit normal scalling methodology outlined in section 3.9
# create 2 dim array containing only regressors
X <- cbind(as.matrix(Num_Cases),as.matrix(Distance))
# scale regressors using scale function -- essentially eqn 3.55
Z <- scale(X)
y <- as.matrix(Delivery_Time)
# scale responses using scale function -- essentially eqn 3.56
y_star <- scale(y)
# from eqn 3.57
b_hat = ginv(t(Z) %*% Z) %*% t(Z) %*% y_star
