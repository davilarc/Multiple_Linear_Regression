knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(xtable)
library("xlsx") # Needed to read data
library(psych) # For geometric mean in Example 5.3
library(MASS) # Needed for ginv() function
rm(list = ls())
exL <- read.xlsx("data-table-B09.xlsx",
sheetIndex = 1,
colIndex = c(1,2,3,4,5),
as.data.frame = TRUE,
header = TRUE)
names(exL) <- c("fluid_vel", "viscosity","mesh_open","fluid_gas_vel","pressure_drop")
attach(exL)
out <- as.data.frame(c(exL))
colnames(out) <- c("fluid_vel", "viscosity","mesh_open","fluid_gas_vel","pressure_drop")
tab <- (xtable(out, digits=c(0,2,1,2,3,1)))
print(tab, type="html")
# Output data structure and dimensions
str(exL)
dim(exL)
model <- lm(pressure_drop ~ fluid_vel + viscosity + mesh_open + fluid_gas_vel)
summary(model)
xtable(summary(model))
xtable(anova(model))
plot(model)
# Letâ€™s look at a plot of the R-student residuals versus the fitted values
R_Student_Residuals <- rstudent(model)
y_hat <- model$fitted.values
plot(y_hat, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Pressure Drop", main = "R-Student Residuals versus Fitted Values")
plot(fluid_vel, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Fluid Velocity", main = "R-Student Residuals versus Fluid Velocity")
plot(viscosity, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Viscosity", main = "R-Student Residuals versus Viscosity")
plot(mesh_open, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Mesh Opening", main = "R-Student Residuals versus Mesh Opening")
plot(fluid_gas_vel, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Fluid Gas Velocity", main = "R-Student Residuals versus Fluid Gas Velocity")
model <- lm(pressure_drop ~ fluid_vel + log(viscosity) + mesh_open + fluid_gas_vel)
summary(model)
xtable(summary(model))
xtable(anova(model))
plot(model)
R_Student_Residuals <- rstudent(model)
y_hat <- model$fitted.values
plot(y_hat, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Pressure Drop", main = "R-Student Residuals versus Fitted Values")
plot(fluid_vel, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Fluid Velocity", main = "R-Student Residuals versus Fluid Velocity")
plot(log(viscosity), R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Viscosity", main = "R-Student Residuals versus log(Viscosity)")
plot(mesh_open, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Mesh Opening", main = "R-Student Residuals versus Mesh Opening")
plot(fluid_gas_vel, R_Student_Residuals, ylab = "R-Student Residuals", xlab = "Fluid Gas Velocity", main = "R-Student Residuals versus Fluid Gas Velocity")
exL2 <- read.xlsx("data-table-B13.xlsx",
sheetIndex = 1,
colIndex = c(2,3,4,5,6,7,8),
as.data.frame = TRUE,
header = TRUE)
names(exL2) <- c("thrust",
"primary",
"secondary",
"fuel",
"press",
"exhaust",
"ambient")
attach(exL2)
# Output data structure and dimensions
str(exL2)
dim(exL2)
out <- as.data.frame(c(exL2))
colnames(out) <- c("thrust", "primary","secondary","fuel","press","exhaust","ambient")
tab <- xtable(out, digits=c(0,0,0,0,0,0,0,0))
print(tab, type="html")
# Perform preliminary calculations that we might use at some point
N <- length(thrust)
X <- matrix(c(rep(1, N),
exL2[, "primary"],
exL2[, "secondary"],
exL2[, "fuel"],
exL2[, "press"],
exL2[, "exhaust"],
exL2[, "ambient"]), ncol = 7, byrow = FALSE) # Define X matrix of regressor observations
xTx <- t(X) %*% X # Calulate the matrix product of X_Transpose and X
C <- ginv(xTx, tol=.Machine$double.eps) # Define C matrix
model.jet <- lm(thrust ~ primary + secondary + fuel + press + exhaust + ambient)
model.jet
summary(model.jet)
anova(model.jet)
df_T <- N - 1
df_Regression <- length(model.jet$coefficients) - 1 # Number of predictor variables, two in this case
k <- df_Regression # Sometimes helpful to use the variable
p <- k + 1 # Same reasoning
df_Residual <- df_T - df_Regression
y_observed <- exL2[, "thrust"] # Create vector of dependent variable observations
y_predicted <- (X %*% ginv(t(X)%*%X,tol=.Machine$double.eps) %*% t(X)) %*% y_observed # Hat matrix approach, just for grins.
y_bar <- mean(y_observed)
xTy <- t(X) %*% y_observed # Define rhs of least squares normal equations in matrix form
BetaCoefficients <- C %*% xTy # Calculate using ginv()
ResidualVector <- y_observed - X%*%BetaCoefficients # Define vector of residuals for each observation
SS_Residuals <- t(ResidualVector) %*% ResidualVector # Dot product of residual vector and its transpose
SST_dt <- sum((y_observed - y_bar)^2)
SS_Regression_dt <- sum((y_predicted - y_bar)^2)
SS_Residual_dt <- SST_dt - SS_Regression_dt
MS_Regression <- SS_Regression_dt / df_Regression
MS_Residual <- SS_Residual_dt / df_Residual
F_test <- MS_Regression / MS_Residual
t_test <- BetaCoefficients / sqrt(MS_Residual * diag(C)) # Formula on p.88
significanceLevel <- 0.05
F_critical <- qf(1-significanceLevel/2, df_Regression, df_Residual)
t_critical <- qt(1-significanceLevel/2, df_Residual)
#p_val <- 2*(1 - pt(t_test, df_Residual)) # Multiply by two since it is a two-tailed hypothesis test
# compare with my calculations
alpha = 0.05
tcritical_value = abs(qt(alpha/2, df = df_Residual))
p_values = 2*pt(-abs(t_test), df = df_Residual)
qqnorm(model.jet$residuals,main="Normal QQ plot of Residuals (e_i)")
qqline(model.jet$residuals)
plot(thrust,rstudent(model.jet), main="residuals vs fits (thrust)",
ylab="r-student residual")
abline(0, 0, col="gray")
plot(primary,rstudent(model.jet), main="residuals vs primary",
ylab="r-student residual")
abline(0, 0, col="gray")
plot(secondary,rstudent(model.jet), main="residuals vs secondary",
ylab="r-student residual")
abline(0, 0, col="gray")
plot(fuel,rstudent(model.jet), main="residuals vs fuel",
ylab="r-student residual")
abline(0, 0, col="gray")
plot(press,rstudent(model.jet), main="residuals vs press",
ylab="r-student residual")
abline(0, 0, col="gray")
plot(exhaust,rstudent(model.jet), main="residuals vs exhaust",
ylab="r-student residual")
abline(0, 0, col="gray")
plot(ambient,rstudent(model.jet), main="residuals vs ambient",
ylab="r-student residual")
abline(0, 0, col="gray")
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(xtable)
library("xlsx") # Needed to read data
library(MASS) # Needed for ginv() function
rm(list = ls())
exL9 <- read.xlsx("data-ex-3-1.xlsx",
sheetIndex = 1,
colIndex = c(2,3,4),
as.data.frame = TRUE,
header = TRUE)
# Assign labels to data columns using names() and attach() commands
names(exL9) <- c("time","cases","distance")
attach(exL9)
# Output data to make sure it reads properly
out <- as.data.frame(c(exL9))
colnames(out) <- c("time","cases","distance")
tab <- (xtable(out, digits=c(0,2,0,0)))
print(tab, type="html")
# Output data structure and dimensions
str(exL9)
dim(exL9)
X <- cbind(matrix(1,length(distance),1),as.matrix(cases),as.matrix(distance))
y <- as.matrix(time)
xTx <- t(X) %*% X
H_matrix <- X %*% ginv(xTx, tol=.Machine$double.eps) %*% t(X)
# get the diagonal
diag(H_matrix)
# perform multiple least squares regression
model <-  lm(time ~ cases+distance)
# calculate hat matrix automatically
hat_diags <- lm.influence(model)$hat
hat_diags
# sequence of observations
Obs <- seq(1, length(time))
influence_stats <- data.frame(cbind(Obs, hat_diags))
out <- influence_stats
colnames(out) <- c("Obs $i$", "$h_{ii}$")
tab <- (xtable(out, digits=c(0,0,5)))
print(tab, type="html")
Run <- c("9 and 22 in",
"9 out",
"22 out",
"9 and 22 out")
beta_0 <- c(" "," "," "," ")
beta_1 <- c(" "," "," "," ")
beta_2 <- c(" "," "," "," ")
MS_Res <- c(" "," "," "," ")
R_sqrd <- c(" "," "," "," ")
unnamed_table <- data.frame(cbind(Run,
beta_0,
beta_1,
beta_2,
MS_Res,
R_sqrd))
out <- unnamed_table
colnames(out) <- c("Run",
"beta_hat_0",
"beta_hat_1",
"beta_hat_2",
"$MS_{Res}$",
"$R_2$")
tab <- (xtable(out, digits=c(0,0,0,0,0,0,0)))
print(tab, type="html")
# scenario 1, points 9 and 22 in
time.s1 <- time
cases.s1 <- cases
distance.s1 <- distance
model.s1 <-  lm(time.s1 ~ cases.s1 + distance.s1)
# scenario 2, point 9 out
time.s2 <- time[1:length(time)][-9]
cases.s2 <- cases[1:length(cases)][-9]
distance.s2 <- distance[1:length(distance)][-9]
model.s2 <-  lm(time.s2 ~ cases.s2 + distance.s2)
# scenario 3, point 22 out
time.s3 <- time[1:length(time)][-22]
cases.s3 <- cases[1:length(cases)][-22]
distance.s3 <- distance[1:length(distance)][-22]
model.s3 <-  lm(time.s3 ~ cases.s3 + distance.s3)
# scenario 4, points 9 and 22 out
time.s4 <- time[1:length(time)][-9][-21]
cases.s4 <- cases[1:length(cases)][-9][-21]
distance.s4 <- distance[1:length(distance)][-9][-21]
model.s4 <-  lm(time.s4 ~ cases.s4 + distance.s4)
Run <- c("9 and 22 in",
"9 out",
"22 out",
"9 and 22 out")
beta_0 <- as.data.frame(c(model.s1$coeff[1],
model.s2$coeff[1],
model.s3$coeff[1],
model.s4$coeff[1]))
beta_1 <- as.data.frame(c(model.s1$coeff[2],
model.s2$coeff[2],
model.s3$coeff[2],
model.s4$coeff[2]))
beta_2 <- as.data.frame(c(model.s1$coeff[3],
model.s2$coeff[3],
model.s3$coeff[3],
model.s4$coeff[3]))
MS_Res <- as.data.frame(c(anova(model.s1)$'Mean Sq'[3],
anova(model.s2)$'Mean Sq'[3],
anova(model.s3)$'Mean Sq'[3],
anova(model.s4)$'Mean Sq'[3]))
R_sqrd <- as.data.frame(c(summary(model.s1)$r.squared,
summary(model.s2)$r.squared,
summary(model.s3)$r.squared,
summary(model.s4)$r.squared))
unnamed_table2 <- data.frame(cbind(Run,
beta_0,
beta_1,
beta_2,
MS_Res,
R_sqrd))
out2 <- unnamed_table2
colnames(out2) <- c("Run",
"beta_hat_0",
"beta_hat_1",
"beta_hat_2",
"$MS_{Res}$",
"$R_2$")
rownames(out2) <- c("1","2","3","4")
tab2 <- (xtable(out2, digits=c(0,0,3,3,3,3,4)))
print(tab2, type="html")
# rstudent residual calculation
model.1 <- lm(time ~ cases + distance)
# Calculate studentized residuals, r_i (eqn 4.8)
e_i <- model.1$residuals
MS_Res <- anova(model.1)$'Mean Sq'[3]
r_i <- e_i/sqrt(MS_Res * (1-hat_diags))
p <- sum(hat_diags)
D_i <- ((r_i)^2/p) * (hat_diags/(1-hat_diags))
D_i
D_i_auto <- cooks.distance(model.1)
D_i_auto
# obtain and add Cook's D to table 6.1 dataframe
influence_stats$Cooks_D <- c(D_i_auto)
influence_stats$DFFITS <- c(dffits(model.1))
dfbetas.col <- dfbetas(model.1)
influence_stats$DFBETAS_0 <- c(dfbetas.col[,1])
influence_stats$DFBETAS_1 <- c(dfbetas.col[,2])
influence_stats$DFBETAS_2 <- c(dfbetas.col[,3])
out <- influence_stats
colnames(out) <- c("Obs $i$",
"$h_{ii}$",
"$D_i$",
"$DFFITS_i$",
"$DFBETAS_{0i}$",
"$DFBETAS_{1i}$",
"$DFBETAS_{2i}$")
tab <- (xtable(out, digits=c(0,0,5,5,4,4,4,4)))
print(tab, type="html")
influence_stats$covratio <- c(covratio(model.1))
out <- influence_stats
colnames(out) <- c("Obs $i$",
"$h_{ii}$",
"$D_i$",
"$DFFITS_i$",
"$DFBETAS_{0i}$",
"$DFBETAS_{1i}$",
"$DFBETAS_{2i}$",
"$COVRATIO_i$")
tab <- (xtable(out, digits=c(0,0,5,5,4,4,4,4,4)))
print(tab, type="html")
n <- length(time)
limit_plus <- (1 + 3*p/n)
limit_minus <- (1 - 3*p/n)
points <- which(influence_stats$covratio > limit_plus | influence_stats$covratio < limit_minus)
